{"version":3,"sources":["Slider.js","editor.js","App.js","serviceWorker.js","index.js"],"names":["Slider","min","max","value","type","onChange","className","Editor","props","state","hue","blur","grayscale","contrast","opacity","brightness","invert","sepia","saturate","filterStyle","filter","this","transform","style","styles","container","src","width","height","alt","e","setState","target","Component","display","flexDirection","input","padding","fontSize","output","fontWeight","label","alignSelf","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.673966ed.chunk.js","sourcesContent":["import React from 'react'\nimport './Slider.css'\nfunction Slider({min, max, value, type, onChange}) {\n    return (\n        <div className='Slider'>\n            <input \n            min= {min}\n            max= {max}\n            type={type}\n            value= {value}\n            onChange={onChange}\n          />\n        </div>\n    )\n}\n\nexport default Slider;","import React, { Component } from 'react'\nimport Slider from './Slider'\nclass Editor extends Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        hue: 0, \n        blur: 0,\n        grayscale: 0,\n        contrast: 100,\n        opacity: 100,\n        brightness: 100,\n        invert: 0,\n        sepia: 0,\n        saturate: 100\n        // rotate: 0\n      }\n    }\n\n    render() {\n      const filterStyle = {\n        filter: `hue-rotate(${this.state.hue}deg) blur(${this.state.blur}px) \n        grayscale(${this.state.grayscale}%) contrast(${this.state.contrast}%)\n        opacity(${this.state.opacity}%) brightness(${this.state.brightness}%)\n        invert(${this.state.invert}%) sepia(${this.state.sepia}%)\n        saturate(${this.state.saturate}%)`,\n        transform: `rotate(45deg)`\n      }\n\n      return (\n        <div style={styles.container}>\n          <img \n            src='images/liya.jpeg'\n            width=\"500\"\n            height=\"auto\"\n            style={filterStyle}\n            alt='enteredimg'\n          />\n\n          <span>Hue: {this.state.hue}</span>\n          <Slider\n            min=\"0\"\n            max=\"360\"\n            type=\"range\"\n            value={this.state.hue}\n            onChange={(e) =>{\n              this.setState({ hue: e.target.value })\n            }}\n          />\n\n          <span>Blur: {this.state.blur}</span>\n          <Slider \n            min=\"0\"\n            max=\"10\"\n            type=\"range\"\n            value={this.state.blur}\n            onChange={(e) => {\n              this.setState({ blur: e.target.value })\n            }}\n          />\n\n          <span>Grayscale: {this.state.grayscale}</span>\n          <Slider \n            min=\"0\"\n            max=\"100\"\n            type=\"range\"\n            value={this.state.grayscale}\n            onChange={(e) => {\n              this.setState({ grayscale: e.target.value })\n            }}\n          />\n\n          <span>Contrast: {this.state.contrast}</span>\n          <Slider \n            min=\"0\"\n            max=\"200\"\n            type=\"range\"\n            value={this.state.contrast}\n            onChange={(e) => {\n              this.setState({ contrast: e.target.value })\n            }}\n          />\n\n          <span>Opacity: {this.state.opacity}</span>\n          <Slider \n            min=\"0\"\n            max=\"100\"\n            type=\"range\"\n            value={this.state.opacity}\n            onChange={(e) => {\n              this.setState({ opacity: e.target.value })\n            }}\n          />\n\n          <span>Brightness: {this.state.brightness}</span>\n          <Slider \n            min=\"0\"\n            max=\"200\"\n            type=\"range\"\n            value={this.state.brightness}\n            onChange={(e) => {\n              this.setState({ brightness: e.target.value })\n            }}\n          />\n\n          <span>Invert: {this.state.invert}</span>\n          <Slider \n            min=\"0\"\n            max=\"100\"\n            type=\"range\"\n            value={this.state.invert}\n            onChange={(e) => {\n              this.setState({ invert: e.target.value })\n            }}\n          />\n\n          <span>Sepia: {this.state.sepia}</span>\n          <Slider \n            min=\"0\"\n            max=\"100\"\n            type=\"range\"\n            value={this.state.sepia}\n            onChange={(e) => {\n              this.setState({ sepia: e.target.value })\n            }}\n          />\n\n          <span>Saturate: {this.state.saturate}</span>\n          <Slider \n            min=\"0\"\n            max=\"200\"\n            type=\"range\"\n            value={this.state.saturate}\n            onChange={(e) => {\n              this.setState({ saturate: e.target.value })\n            }}\n          />\n        </div>\n      )\n    }\n}\n\nexport default Editor\n\nconst fontSize = 20\nconst padding = 0.33\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column'\n  }, \n  input: {\n    padding: `${padding}em`,\n    fontSize: `${fontSize}px`\n  },\n  output: {\n    fontSize: `${fontSize * 1.5}px`,\n    padding: `${padding}em`,\n    fontWeight: 'bold'\n  },\n  label: {\n    alignSelf: 'flex-start'\n  }\n}","import Editor from './editor';\nimport React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Editor />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}