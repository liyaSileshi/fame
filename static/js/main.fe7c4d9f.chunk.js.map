{"version":3,"sources":["Slider.js","editor.js","FileDownload.js","ImgDrop.js","PageHeader.js","App.js","serviceWorker.js","index.js"],"names":["Slider","min","max","value","type","onChange","className","Editor","props","fileChangedHandler","event","setState","selectedFile","target","files","reader","FileReader","onloadend","imagePreviewUrl","result","readAsDataURL","handleDownloadClick","preventDefault","base64Data","canvasRef","imagePreviewCanvasRef","current","state","fileExtension","substring","length","indexOf","imageData64","toDataURL","myFilename","myNewCroppedFile","base64String","filename","arr","split","mime","match","bstr","atob","n","u8arr","Uint8Array","charCodeAt","File","base64StringtoFile","console","log","element","document","createElement","setAttribute","style","display","body","appendChild","click","removeChild","downloadBase64File","saveOnCanvas","image64","filterString","canvas","ctx","getContext","image","Image","src","onload","filter","drawImage","width","height","image64toCanvasRef","getFilterString","React","createRef","hue","blur","grayscale","contrast","opacity","brightness","invert","sepia","saturate","this","transform","filterStyle","getFilterStyle","$imagePreview","alt","name","ref","e","onClick","Component","fontSize","PageHeader","App","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fe7c4d9f.chunk.js","sourcesContent":["import React from 'react'\nimport './Slider.css'\nfunction Slider({min, max, value, type, onChange}) {\n    return (\n        <div className='Slider'>\n            <input \n            min= {min}\n            max= {max}\n            type={type}\n            value= {value}\n            onChange={onChange}\n          />\n        </div>\n    )\n}\n\nexport default Slider;","import React, { Component } from 'react'\nimport Slider from './Slider'\nimport { base64StringtoFile, extractImageFileExtensionFromBase64,\n        downloadBase64File, image64toCanvasRef } from './FileDownload'\nimport './editor.css'\n\nclass Editor extends Component {\n    constructor(props) {\n      super(props)\n      this.imagePreviewCanvasRef = React.createRef()\n      this.state = {\n        hue: 0, \n        blur: 0,\n        grayscale: 0,\n        contrast: 100,\n        opacity: 100,\n        brightness: 100,\n        invert: 0,\n        sepia: 0,\n        saturate: 100,\n        selectedFile: null,\n        imagePreviewUrl: null,\n        fileExtension: null\n        // rotate: 0\n      }\n      \n    }\n\n    fileChangedHandler = event => {\n      this.setState({\n        selectedFile: event.target.files[0]\n      })\n      let reader = new FileReader();\n      reader.onloadend = () => {\n        this.setState({\n          imagePreviewUrl: reader.result\n        });\n      }\n      reader.readAsDataURL(event.target.files[0])\n    }\n\n    // handles the download click event\n    handleDownloadClick = (event) => {\n      event.preventDefault();\n      const canvasRef = this.imagePreviewCanvasRef.current\n      const {imagePreviewUrl} = this.state\n      // image64toCanvasRef(canvasRef, imagePreviewUrl, this.getFilterString())\n\n      const fileExtension = extractImageFileExtensionFromBase64(imagePreviewUrl)\n      // const canvasRef = this.imagePreviewCanvasRef.current\n      const imageData64 = canvasRef.toDataURL('image/'+fileExtension)\n\n      // console.log(imagePreviewUrl)\n      const myFilename = 'previewFile.' + fileExtension\n      // file to be uploaded\n      const myNewCroppedFile = base64StringtoFile(imageData64, myFilename)\n      console.log(myNewCroppedFile)\n      // download file\n      downloadBase64File(imageData64, myFilename)\n    }\n\n    saveOnCanvas = (event) => {\n      const canvasRef = this.imagePreviewCanvasRef.current\n      const {imagePreviewUrl} = this.state\n      image64toCanvasRef(canvasRef, imagePreviewUrl, this.getFilterString())\n    }\n\n    getFilterStyle() {\n      return {\n        filter: `hue-rotate(${this.state.hue}deg) blur(${this.state.blur}px) \n        grayscale(${this.state.grayscale}%) contrast(${this.state.contrast}%)\n        opacity(${this.state.opacity}%) brightness(${this.state.brightness}%)\n        invert(${this.state.invert}%) sepia(${this.state.sepia}%)\n        saturate(${this.state.saturate}%)`,\n        transform: `rotate(0deg)`\n      }\n    }\n\n    getFilterString() {\n      return `hue-rotate(${this.state.hue}deg) blur(${this.state.blur}px) \n        grayscale(${this.state.grayscale}%) contrast(${this.state.contrast}%)\n        opacity(${this.state.opacity}%) brightness(${this.state.brightness}%)\n        invert(${this.state.invert}%) sepia(${this.state.sepia}%)\n        saturate(${this.state.saturate}%)`  \n    }\n    \n    render() {\n      const filterStyle = this.getFilterStyle()\n      let $imagePreview = (<div className=\"previewText image-container\">Please select an Image for Preview</div>);\n    if (this.state.imagePreviewUrl) {\n      $imagePreview = (<div className=\"image-container\" ><img src={this.state.imagePreviewUrl}style={filterStyle}\n      alt=\"icon\" width=\"600\" height='500'/> </div>);\n    }\n    // let img = this.state.imagePreviewUrl.toDataURL('image/')\n      return (\n        <div>\n          <div className='container'>\n            <div>\n              <input type=\"file\" className='choosefile' name=\"avatar\" onChange={this.fileChangedHandler} />\n              {$imagePreview} {/*chosen image from file upload*/}\n              <canvas width=\"500\" height=\"500\" ref={this.imagePreviewCanvasRef}></canvas>\n            </div>\n\n            <div>\n              <span>Hue: {this.state.hue}</span>\n              <Slider\n                min=\"0\"\n                max=\"360\"\n                type=\"range\"\n                value={this.state.hue}\n                onChange={(e) =>{\n                  this.setState({ hue: e.target.value })\n                }}\n              />\n\n              <span>Blur: {this.state.blur}</span>\n              <Slider \n                min=\"0\"\n                max=\"10\"\n                type=\"range\"\n                value={this.state.blur}\n                onChange={(e) => {\n                  this.setState({ blur: e.target.value })\n                }}\n              />\n\n              <span>Grayscale: {this.state.grayscale}</span>\n              <Slider \n                min=\"0\"\n                max=\"100\"\n                type=\"range\"\n                value={this.state.grayscale}\n                onChange={(e) => {\n                  this.setState({ grayscale: e.target.value })\n                }}\n              />\n\n              <span>Contrast: {this.state.contrast}</span>\n              <Slider \n                min=\"0\"\n                max=\"200\"\n                type=\"range\"\n                value={this.state.contrast}\n                onChange={(e) => {\n                  this.setState({ contrast: e.target.value })\n                }}\n              />\n\n              <span>Opacity: {this.state.opacity}</span>\n              <Slider \n                min=\"0\"\n                max=\"100\"\n                type=\"range\"\n                value={this.state.opacity}\n                onChange={(e) => {\n                  this.setState({ opacity: e.target.value })\n                }}\n              />\n\n              <span>Brightness: {this.state.brightness}</span>\n              <Slider \n                min=\"0\"\n                max=\"200\"\n                type=\"range\"\n                value={this.state.brightness}\n                onChange={(e) => {\n                  this.setState({ brightness: e.target.value })\n                }}\n              />\n\n              <span>Invert: {this.state.invert}</span>\n              <Slider \n                min=\"0\"\n                max=\"100\"\n                type=\"range\"\n                value={this.state.invert}\n                onChange={(e) => {\n                  this.setState({ invert: e.target.value })\n                }}\n              />\n\n              <span>Sepia: {this.state.sepia}</span>\n              <Slider \n                min=\"0\"\n                max=\"100\"\n                type=\"range\"\n                value={this.state.sepia}\n                onChange={(e) => {\n                  this.setState({ sepia: e.target.value })\n                }}\n              />\n\n              <span>Saturate: {this.state.saturate}</span>\n              <Slider \n                min=\"0\"\n                max=\"200\"\n                type=\"range\"\n                value={this.state.saturate}\n                onChange={(e) => {\n                  this.setState({ saturate: e.target.value })\n                }}\n              />\n            </div>\n          </div>\n\n        <div className='btn'>\n          <button onClick = {this.saveOnCanvas}>Save</button> \n          <button onClick={this.handleDownloadClick}>Download</button> {/*handles download button*/}   \n        </div>\n\n      </div>\n      )\n    }\n}\n\nexport default Editor\n\nconst fontSize = 20\nconst padding = 0.33\n\nconst styles = {\n\n   input: {\n    padding: `${padding}em`,\n    fontSize: `${fontSize}px`\n  },\n  output: {\n    fontSize: `${fontSize * 1.5}px`,\n    padding: `${padding}em`,\n    fontWeight: 'bold'\n  },\n  label: {\n    alignSelf: 'flex-start'\n  }\n}\n","\n// Download a Base64-encoded file\nexport function downloadBase64File(base64Data, filename) {\n    var element = document.createElement('a');\n    element.setAttribute('href', base64Data);\n    element.setAttribute('download', filename);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  }\n\n// Convert a Base64-encoded string to a File object\nexport function base64StringtoFile(base64String, filename) {\n    var arr = base64String.split(','), mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n    while(n--){\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new File([u8arr], filename, {type:mime});\n}\n\n// Extract a Base64 Image's File Extension\nexport function extractImageFileExtensionFromBase64(base64Data){\n    return base64Data.substring(\"data:image/\".length, base64Data.indexOf(\";base64\"))\n}\n\n// Base64 Image to Canvas with a Crop\nexport function image64toCanvasRef(canvasRef, image64, filterString){\n    // console.log(filterString)\n    const canvas = canvasRef // document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const image = new Image()\n    image.src = image64\n    image.onload = function() {\n        ctx.filter = filterString\n        ctx.drawImage(\n          image, 0, 0, canvas.width, canvas.height\n        )\n      }\n}\n\n","import React, { Component } from 'react';\nimport './App.css';\n\nclass ImgDrop extends Component {\n  state =  {\n    selectedFile: null,\n    imagePreviewUrl: null\n  };\n \n  fileChangedHandler = event => {\n    this.setState({\n      selectedFile: event.target.files[0]\n    })\n \n    let reader = new FileReader();\n     \n    reader.onloadend = () => {\n      this.setState({\n        imagePreviewUrl: reader.result\n      });\n    }\n \n    reader.readAsDataURL(event.target.files[0])\n \n  }\n \n  render() {\n    let $imagePreview = (<div className=\"previewText image-container\">Please select an Image for Preview</div>);\n    if (this.state.imagePreviewUrl) {\n      $imagePreview = (<div className=\"image-container\" ><img src={this.state.imagePreviewUrl}\n       alt=\"icon\" width=\"200\"/> </div>);\n    }\n \n    return (\n      <div className=\"App\">\n         <input type=\"file\" name=\"avatar\" onChange={this.fileChangedHandler} />\n         <button type=\"button\" onClick={this.submit} > Upload </button>\n         { $imagePreview }\n      </div>\n    );\n  }\n}\n\nexport default ImgDrop;\n","import React from 'react'\nimport './PageHeader.css'\n\nfunction PageHeader() {\n    return (\n        <div className='PageHeader'>\n            <h1>\n                Photo Filter\n            </h1>\n        </div>\n    )\n}\n\nexport default PageHeader;","import Editor from './editor';\nimport React, { Component } from 'react';\nimport './App.css';\nimport ImgDrop from './ImgDrop'\nimport PageHeader from './PageHeader'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\"> */}\n      {/* <ImgDrop /> */}\n      <PageHeader />\n      <Editor />\n      {/* </header> */}\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}